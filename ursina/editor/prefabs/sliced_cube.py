from ursina.editor.level_editor import *


def stretch_vertices(verts, scale, limit=.25):
    verts = [Vec3(*e) for e in verts]

    for i, v in enumerate(verts):
        for j in [0,1,2]:
            if v[j] <= -limit:
                verts[i][j] += .5
                verts[i][j] -= scale[j] / 2
            elif v[j] >= limit:
                verts[i][j] -= .5
                verts[i][j] += scale[j] / 2

        verts[i][0] /= scale[0]
        verts[i][1] /= scale[1]
        verts[i][2] /= scale[2]

    return verts

sliced_cube_model = Mesh(
    vertices=[(0.4, -0.5, 0.4), (-0.4, -0.5, -0.4), (-0.4, -0.5, 0.4), (-0.5, 0.4, -0.4), (-0.5, -0.4, 0.4), (-0.5, -0.4, -0.4), (0.4, 0.4, -0.5), (-0.4, -0.4, -0.5), (0.4, -0.4, -0.5), (-0.4, 0.5, 0.4), (0.4, 0.5, -0.4), (0.4, 0.5, 0.4), (0.5, 0.4, 0.4), (0.5, -0.4, -0.4), (0.5, -0.4, 0.4), (0.5, 0.4, -0.4), (0.4, 0.5, -0.4), (0.4, 0.4, -0.5), (0.5, -0.4, -0.4), (0.4, -0.4, -0.5), (0.4, -0.5, -0.4), (-0.5, 0.4, -0.4), (-0.4, 0.4, -0.5), (-0.4, 0.5, -0.4), (-0.4, -0.5, -0.4), (-0.4, -0.4, -0.5), (-0.5, -0.4, -0.4), (-0.4, -0.5, -0.4), (-0.5, -0.4, 0.4), (-0.4, -0.5, 0.4), (-0.4, 0.4, -0.5), (-0.5, -0.4, -0.4), (-0.4, -0.4, -0.5), (0.4, -0.4, -0.5), (0.5, 0.4, -0.4), (0.4, 0.4, -0.5), (-0.4, 0.5, -0.4), (0.4, 0.4, -0.5), (0.4, 0.5, -0.4), (0.4, 0.5, -0.4), (0.5, 0.4, 0.4), (0.4, 0.5, 0.4), (0.4, -0.5, -0.4), (-0.4, -0.4, -0.5), (-0.4, -0.5, -0.4), (-0.4, 0.5, 0.4), (-0.5, 0.4, -0.4), (-0.4, 0.5, -0.4), (0.4, -0.5, 0.4), (0.5, -0.4, -0.4), (0.4, -0.5, -0.4), (0.4, -0.5, 0.4), (0.4, -0.5, -0.4), (-0.4, -0.5, -0.4), (-0.5, 0.4, -0.4), (-0.5, 0.4, 0.4), (-0.5, -0.4, 0.4), (0.4, 0.4, -0.5), (-0.4, 0.4, -0.5), (-0.4, -0.4, -0.5), (-0.4, 0.5, 0.4), (-0.4, 0.5, -0.4), (0.4, 0.5, -0.4), (0.5, 0.4, 0.4), (0.5, 0.4, -0.4), (0.5, -0.4, -0.4), (-0.4, -0.5, -0.4), (-0.5, -0.4, -0.4), (-0.5, -0.4, 0.4), (-0.4, 0.4, -0.5), (-0.5, 0.4, -0.4), (-0.5, -0.4, -0.4), (0.4, -0.4, -0.5), (0.5, -0.4, -0.4), (0.5, 0.4, -0.4), (-0.4, 0.5, -0.4), (-0.4, 0.4, -0.5), (0.4, 0.4, -0.5), (0.4, 0.5, -0.4), (0.5, 0.4, -0.4), (0.5, 0.4, 0.4), (0.4, -0.5, -0.4), (0.4, -0.4, -0.5), (-0.4, -0.4, -0.5), (-0.4, 0.5, 0.4), (-0.5, 0.4, 0.4), (-0.5, 0.4, -0.4), (0.4, -0.5, 0.4), (0.5, -0.4, 0.4), (0.5, -0.4, -0.4)],
    uvs=[(0.9, 0.9), (0.1, 0.1), (0.1, 0.9), (0.1, 0.9), (0.9, 0.1), (0.1, 0.1), (0.9, 0.9), (0.1, 0.1), (0.9, 0.1), (0.1, 0.1), (0.9, 0.9), (0.9, 0.1), (0.1, 0.9), (0.9, 0.1), (0.1, 0.1), (1.0, 0.9), (0.9, 1.0), (0.9, 0.9), (1.0, 0.1), (0.9, 0.1), (0.9, 0.0), (0.0, 0.9), (0.1, 0.9), (0.1, 1.0), (0.1, 0.0), (0.1, 0.1), (0.0, 0.1), (0.1, 0.0), (0.0, 0.1), (0.1, 0.0), (0.1, 0.9), (0.0, 0.1), (0.1, 0.1), (0.9, 0.1), (1.0, 0.9), (0.9, 0.9), (0.1, 1.0), (0.9, 0.9), (0.9, 1.0), (0.9, 1.0), (1.0, 0.9), (0.9, 1.0), (0.9, 0.0), (0.1, 0.1), (0.1, 0.0), (0.1, 1.0), (0.0, 0.9), (0.1, 1.0), (0.9, 0.0), (1.0, 0.1), (0.9, 0.0), (0.9, 0.9), (0.9, 0.1), (0.1, 0.1), (0.1, 0.9), (0.9, 0.9), (0.9, 0.1), (0.9, 0.9), (0.1, 0.9), (0.1, 0.1), (0.1, 0.1), (0.1, 0.9), (0.9, 0.9), (0.1, 0.9), (0.9, 0.9), (0.9, 0.1), (0.1, 0.0), (0.0, 0.1), (0.0, 0.1), (0.1, 0.9), (0.0, 0.9), (0.0, 0.1), (0.9, 0.1), (1.0, 0.1), (1.0, 0.9), (0.1, 1.0), (0.1, 0.9), (0.9, 0.9), (0.9, 1.0), (1.0, 0.9), (1.0, 0.9), (0.9, 0.0), (0.9, 0.1), (0.1, 0.1), (0.1, 1.0), (0.0, 0.9), (0.0, 0.9), (0.9, 0.0), (1.0, 0.1), (1.0, 0.1)],
    normals=[(-0.0, -1.0, 0.0), (-0.0, -1.0, 0.0), (-0.0, -1.0, 0.0), (-1.0, 0.0, 0.0), (-1.0, 0.0, 0.0), (-1.0, 0.0, 0.0), (-0.0, 0.0, -1.0), (-0.0, 0.0, -1.0), (-0.0, 0.0, -1.0), (-0.0, 1.0, 0.0), (-0.0, 1.0, 0.0), (-0.0, 1.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0), (0.5774, 0.5774, -0.5774), (0.5774, 0.5774, -0.5774), (0.5774, 0.5774, -0.5774), (0.5774, -0.5774, -0.5774), (0.5774, -0.5774, -0.5774), (0.5774, -0.5774, -0.5774), (-0.5774, 0.5774, -0.5774), (-0.5774, 0.5774, -0.5774), (-0.5774, 0.5774, -0.5774), (-0.5774, -0.5774, -0.5774), (-0.5774, -0.5774, -0.5774), (-0.5774, -0.5774, -0.5774), (-0.7071, -0.7071, 0.0), (-0.7071, -0.7071, 0.0), (-0.7071, -0.7071, 0.0), (-0.7071, 0.0, -0.7071), (-0.7071, 0.0, -0.7071), (-0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (-0.0, 0.7071, -0.7071), (-0.0, 0.7071, -0.7071), (-0.0, 0.7071, -0.7071), (0.7071, 0.7071, 0.0), (0.7071, 0.7071, 0.0), (0.7071, 0.7071, 0.0), (-0.0, -0.7071, -0.7071), (-0.0, -0.7071, -0.7071), (-0.0, -0.7071, -0.7071), (-0.7071, 0.7071, 0.0), (-0.7071, 0.7071, 0.0), (-0.7071, 0.7071, 0.0), (0.7071, -0.7071, 0.0), (0.7071, -0.7071, 0.0), (0.7071, -0.7071, 0.0), (-0.0, -1.0, 0.0), (-0.0, -1.0, 0.0), (-0.0, -1.0, 0.0), (-1.0, 0.0, 0.0), (-1.0, 0.0, 0.0), (-1.0, 0.0, 0.0), (-0.0, 0.0, -1.0), (-0.0, 0.0, -1.0), (-0.0, 0.0, -1.0), (-0.0, 1.0, 0.0), (-0.0, 1.0, 0.0), (-0.0, 1.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0), (-0.7071, -0.7071, 0.0), (-0.7071, -0.7071, 0.0), (-0.7071, -0.7071, 0.0), (-0.7071, 0.0, -0.7071), (-0.7071, 0.0, -0.7071), (-0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (0.7071, 0.0, -0.7071), (-0.0, 0.7071, -0.7071), (-0.0, 0.7071, -0.7071), (-0.0, 0.7071, -0.7071), (0.7071, 0.7071, 0.0), (0.7071, 0.7071, 0.0), (0.7071, 0.7071, 0.0), (-0.0, -0.7071, -0.7071), (-0.0, -0.7071, -0.7071), (-0.0, -0.7071, -0.7071), (-0.7071, 0.7071, 0.0), (-0.7071, 0.7071, 0.0), (-0.7071, 0.7071, 0.0), (0.7071, -0.7071, 0.0), (0.7071, -0.7071, 0.0), (0.7071, -0.7071, 0.0)],
    static=True,
    mode="triangle",
)



@generate_properties_for_class()
class SlicedCube(Entity):
    default_values = Entity.default_values | dict(model=None, shader='lit_with_shadows_shader', texture='white_cube', collider='box', name='sliced_cube') # combine dicts
    def __init__(self, stretchable_mesh=sliced_cube_model, **kwargs):
        kwargs = __class__.default_values | kwargs

        if isinstance(stretchable_mesh, str):
            stretchable_mesh = load_model(stretchable_mesh, use_deepcopy=True)
        self.stretchable_mesh = stretchable_mesh
        # self.original_vertices = model.vertices
        super().__init__(**__class__.default_values | kwargs)
        self.model = deepcopy(self.stretchable_mesh)
        # self.model = Mesh(vertices=self.stretchable_mesh.vertices, uvs=self.stretchable_mesh.uvs)
        self.model.name = 'cube'
        self.scale = kwargs['scale']
        self.texture = kwargs['texture']
        print('----------', self.texture)


    def __deepcopy__(self, memo):
        return eval(repr(self))

    # def scale_getter(self):
    #     return super().scale_getter()

    # def scale_setter(self, value):
    #     super().scale_setter(value)
    #     print('------------uuuuuuuuuu')
    #     if self.model:  # ensure init is done and that there's a Mesh as model
    #         self.generate()

    def generate(self):
        print('update model',self.scale)
        self.model.vertices = stretch_vertices(self.stretchable_mesh.vertices, self.world_scale)
        self.model.generate()

    def __setattr__(self, name, value):
        super().__setattr__(name, value)
        if self.model and name in ('scale', 'scale_x', 'scale_y', 'scale_z', 'transform', 'world_transform'):
            self.generate()



if __name__ == '__main__':
    app = Ursina(borderless=False)
    level_editor = LevelEditor()
    level_editor.goto_scene(0,0)

    sliced_cube = SlicedCube(selectable=True, texture='white_cube', original_parent=scene)
    def input(key):
        if key == 'space':
            sliced_cube.generate()


    level_editor.add_entity(sliced_cube)
    app.run()
